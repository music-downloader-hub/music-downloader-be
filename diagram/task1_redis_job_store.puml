@startuml Task1_Redis_Job_Store
!theme plain
title Task 1: Lưu trữ Job và Tiến trình với Redis

actor "Người dùng" as User
participant "Giao diện Web" as Frontend
participant "Job Service" as JobService
participant "Redis Job Store" as RedisJobStore
participant "Redis Cache" as Redis
participant "Go Process" as GoProcess
participant "Process Collector" as Collector

== Khởi tạo Job tải nhạc ==

User -> Frontend: Nhập link Apple Music
Frontend -> JobService: Yêu cầu tạo job mới
activate JobService

JobService -> RedisJobStore: Lưu thông tin job
activate RedisJobStore
RedisJobStore -> Redis: SET job:{id} (Hash)
note right: Lưu job_id, args, created_at, status
Redis --> RedisJobStore: Xác nhận lưu thành công
RedisJobStore --> JobService: Job đã được lưu
deactivate RedisJobStore

JobService -> GoProcess: Khởi động quá trình tải
GoProcess --> JobService: Process đã khởi động
JobService --> Frontend: Trả về job_id
Frontend --> User: Hiển thị "Đang tải..."
deactivate JobService

== Cập nhật tiến trình real-time ==

loop Trong quá trình tải
    GoProcess -> Collector: Gửi dòng tiến trình
    Collector -> JobService: Gọi callback mirror()
    JobService -> RedisJobStore: Cập nhật tiến trình
    activate RedisJobStore
    
    RedisJobStore -> RedisJobStore: Đệm tiến trình (throttle 500ms)
    alt Đủ thời gian throttle
        RedisJobStore -> Redis: SET job:{id}:progress (Hash)
        note right: Lưu phase, percent, speed, downloaded
        Redis --> RedisJobStore: Xác nhận cập nhật
    end
    
    RedisJobStore -> Frontend: Gửi sự kiện SSE
    Frontend -> User: Cập nhật thanh tiến trình
    deactivate RedisJobStore
end

== Lưu trữ log ==

loop Trong quá trình tải
    GoProcess -> Collector: Gửi dòng log
    Collector -> JobService: Gọi callback mirror()
    JobService -> RedisJobStore: Thêm log
    activate RedisJobStore
    
    RedisJobStore -> RedisJobStore: Đệm log (batch 10 dòng)
    alt Đủ 10 dòng
        RedisJobStore -> Redis: RPUSH job:{id}:logs (List)
        Redis -> Redis: LTRIM giữ lại 5000 dòng cuối
        Redis --> RedisJobStore: Xác nhận lưu log
    end
    deactivate RedisJobStore
end

== Xem log tải nhạc ==

User -> Frontend: Nhấn "Xem log"
Frontend -> JobService: Yêu cầu log của job
JobService -> RedisJobStore: Lấy log
activate RedisJobStore
RedisJobStore -> Redis: LRANGE job:{id}:logs -100 -1
Redis --> RedisJobStore: Trả về 100 dòng log cuối
RedisJobStore --> JobService: Trả về log string
deactivate RedisJobStore
JobService --> Frontend: Gửi log
Frontend --> User: Hiển thị log trong popup

== Tối ưu hiệu suất ==

note over RedisJobStore
  **Tối ưu cho người dùng:**
  - Tiến trình cập nhật mượt mà (throttle 500ms)
  - Log được lưu tự động, không mất dữ liệu
  - Hệ thống hoạt động ổn định ngay cả khi Redis chậm
  
  **Tối ưu cho coder:**
  - Local caching giảm 80% Redis calls
  - Batch operations tăng hiệu suất
  - Pipeline operations cho multiple Redis commands
  - Graceful fallback khi Redis unavailable
end note

== Xử lý lỗi ==

alt Redis không khả dụng
    RedisJobStore -> RedisJobStore: Chuyển sang in-memory mode
    note right: Vẫn hoạt động nhưng mất persistence
    RedisJobStore --> JobService: Cảnh báo Redis offline
    JobService --> Frontend: Thông báo "Chế độ offline"
    Frontend --> User: Hiển thị cảnh báo nhẹ
end

alt Go process lỗi
    GoProcess -> JobService: Trả về exit code != 0
    JobService -> RedisJobStore: Cập nhật status = "failed"
    RedisJobStore -> Redis: SET job:{id} status=failed
    JobService --> Frontend: Thông báo lỗi
    Frontend --> User: Hiển thị "Tải thất bại"
end

== Hoàn tất job ==

GoProcess -> JobService: Tải hoàn tất (exit code = 0)
JobService -> RedisJobStore: Cập nhật status = "completed"
RedisJobStore -> Redis: SET job:{id} status=completed
RedisJobStore -> Redis: SET job:{id} return_code=0
JobService --> Frontend: Thông báo hoàn tất
Frontend --> User: Hiển thị "Tải thành công!"

== Dọn dẹp tự động ==

loop Mỗi 24 giờ
    Redis -> Redis: EXPIRE job:{id} 86400
    Redis -> Redis: EXPIRE job:{id}:progress 86400
    Redis -> Redis: EXPIRE job:{id}:logs 86400
    note right: Tự động xóa dữ liệu cũ, tiết kiệm bộ nhớ
end

@enduml