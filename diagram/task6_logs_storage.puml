@startuml Task6_Logs_Storage
!theme plain
title Task 6: Lưu trữ và Theo dõi Log

actor "Người dùng" as User
participant "Giao diện Web" as Frontend
participant "Job Service" as JobService
participant "Redis Job Store" as RedisJobStore
participant "Process Collector" as Collector
participant "Redis Cache" as Redis
participant "Go Process" as GoProcess

== Thu thập log real-time ==

User -> Frontend: Bắt đầu tải nhạc
Frontend -> JobService: Tạo job mới
activate JobService

JobService -> GoProcess: Khởi động quá trình tải
GoProcess --> JobService: Process đã khởi động
JobService -> Collector: Tạo collector với callback
activate Collector

loop Trong quá trình tải
    GoProcess -> Collector: Gửi dòng log (stdout/stderr)
    Collector -> JobService: Gọi callback mirror(line)
    JobService -> RedisJobStore: Thêm log vào buffer
    activate RedisJobStore
    
    RedisJobStore -> RedisJobStore: Đệm log trong bộ nhớ
    note right: Buffer local: _log_buffer[job_id]
    
    alt Đủ 10 dòng log
        RedisJobStore -> Redis: RPUSH job:{id}:logs (List)
        Redis -> Redis: LTRIM giữ lại 5000 dòng cuối
        Redis --> RedisJobStore: Xác nhận lưu batch
        RedisJobStore -> RedisJobStore: Xóa buffer local
    end
    deactivate RedisJobStore
end

== Xem log tải nhạc ==

User -> Frontend: Nhấn "Xem log"
Frontend -> JobService: Yêu cầu log của job
JobService -> RedisJobStore: Lấy log
activate RedisJobStore

RedisJobStore -> RedisJobStore: Kiểm tra buffer local
alt Có log trong buffer
    RedisJobStore -> RedisJobStore: Flush buffer trước
    RedisJobStore -> Redis: RPUSH job:{id}:logs (buffer)
    Redis --> RedisJobStore: Xác nhận flush
end

RedisJobStore -> Redis: LRANGE job:{id}:logs -100 -1
Redis --> RedisJobStore: Trả về 100 dòng log cuối
RedisJobStore --> JobService: Trả về log string
deactivate RedisJobStore

JobService --> Frontend: Gửi log
Frontend --> User: Hiển thị log trong popup
note right: Log hiển thị real-time, dễ đọc

== Tối ưu hiệu suất ==

note over RedisJobStore, Redis
  **Tối ưu cho người dùng:**
  - Log hiển thị ngay lập tức → Không phải chờ
  - Không mất log → Tất cả được lưu an toàn
  - Giao diện mượt mà → Không lag khi xem log
  - Tự động dọn dẹp → Không lo đầy bộ nhớ
  
  **Tối ưu cho coder:**
  - Batch operations → Giảm 90% Redis calls
  - Local buffering → Giảm latency
  - LTRIM tự động → Tránh memory leak
  - Thread-safe → Không conflict khi đọc/ghi
end note

== Xử lý lỗi ==

alt Redis không khả dụng
    RedisJobStore -> RedisJobStore: Chuyển sang in-memory mode
    note right: Vẫn hoạt động nhưng mất persistence
    RedisJobStore --> JobService: Cảnh báo Redis offline
    JobService --> Frontend: Thông báo "Log chỉ lưu tạm"
    Frontend --> User: Hiển thị cảnh báo nhẹ
end

alt Go process lỗi
    GoProcess -> Collector: Gửi error message
    Collector -> JobService: Gọi callback với error
    JobService -> RedisJobStore: Lưu error log
    RedisJobStore -> Redis: RPUSH error message
    JobService --> Frontend: Thông báo lỗi
    Frontend --> User: Hiển thị "Có lỗi xảy ra"
end

== Dọn dẹp tự động ==

loop Mỗi 24 giờ
    Redis -> Redis: EXPIRE job:{id}:logs 86400
    note right: Tự động xóa log cũ, tiết kiệm bộ nhớ
end

== Graceful shutdown ==

User -> Frontend: Dừng tải nhạc
Frontend -> JobService: Hủy job
JobService -> RedisJobStore: Flush tất cả buffer
activate RedisJobStore
RedisJobStore -> Redis: RPUSH tất cả log còn lại
Redis --> RedisJobStore: Xác nhận flush cuối
RedisJobStore --> JobService: Shutdown hoàn tất
deactivate RedisJobStore

== Monitoring log system ==

note over RedisJobStore
  **Theo dõi hệ thống:**
  - Số lượng log per job: Tối đa 5000 dòng
  - TTL: 24 giờ tự động xóa
  - Buffer size: 10 dòng per batch
  - Flush interval: Mỗi 10 dòng hoặc shutdown
  - Memory usage: Tối ưu với LTRIM
end note

== API log management ==

User -> Frontend: Truy cập trang quản lý log
Frontend -> JobService: GET /downloads/{job_id}/logs
JobService -> RedisJobStore: Lấy log với pagination
RedisJobStore -> Redis: LRANGE với offset/limit
Redis --> RedisJobStore: Trả về log phân trang
RedisJobStore --> JobService: Log với metadata
JobService --> Frontend: Gửi log + pagination info
Frontend --> User: Hiển thị log với phân trang

== Performance metrics ==

note over RedisJobStore
  **Chỉ số hiệu suất:**
  - Redis calls giảm 90% nhờ batching
  - Latency giảm 80% nhờ local buffer
  - Memory usage ổn định nhờ LTRIM
  - Throughput tăng 5x nhờ pipeline
end note

@enduml